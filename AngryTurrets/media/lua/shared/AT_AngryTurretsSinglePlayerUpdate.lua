---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by THeartnet.
--- DateTime: 8/29/2022 08:51
---
if isClient() then return end
if isServer() then
    print("Singleplayer part skipped");
    return;
else
    print("Singleplayer part loaded");
end

AT_WorldTurretsList = {};
AT_TurretPistolAmmo = {"Bullets9mm", "Bullets45", "Bullets44", "Bullets38"};
AT_TurretShotgunAmmo = {"ShotgunShells"};
AT_TurretSniperAmmo = {"223Bullets", "308Bullets", "556Bullets"};
AT_TurretAmmoTypes = {["TurretPistol"]=AT_TurretPistolAmmo, ["TurretShotgun"]=AT_TurretShotgunAmmo, ["TurretSniper"]=AT_TurretSniperAmmo};
AT_TurretReloadSeconds = {["TurretPistol"]=0.5, ["TurretShotgun"]=2, ["TurretSniper"]=2.5};
AT_TurretShootingRadius = {["TurretPistol"]=10, ["TurretShotgun"]=5, ["TurretSniper"]=20};
AT_TurretShootingSound = {["TurretPistol"]="AT_PistolShoot", ["TurretShotgun"]="AT_ShotgunShoot", ["TurretSniper"]="AT_SniperShoot"};
AT_TurretShootingSoundRadius = {["TurretPistol"]=30, ["TurretShotgun"]=50, ["TurretSniper"]=80};

-- if the square has a turret and the turret is not on the list, add to the list.
function AT_OnLoadTurretSquare(turretSquare)
    if not turretSquare then return end
    local turret = AT_CheckSquareHasTurret(turretSquare);
    if turret then
        if AT_CheckTurretSquareNotInList(turretSquare) then
            table.insert(AT_WorldTurretsList, AT_GetSquareTable(turretSquare));
            print("Yo, turelko established");
        end
    end
end
-- check if the turret's square is in the list
function AT_CheckTurretSquareNotInList(turretSquare)
    if not turretSquare then
        return;
    end
    local squareTable = AT_GetSquareTable(turretSquare);
    local notInList = true;
    for k,v in ipairs(AT_WorldTurretsList) do
        if v.x == squareTable.x and v.y == squareTable.y and v.z == squareTable.z then
            notInList = false;
            break
        end
    end
    return notInList;
end
-- get the square table for the list
function AT_GetSquareTable(square)
    if not square then return end
    local squareTable = {x = square:getX(), y = square:getY(), z = square:getZ()};
    return squareTable;
end
-- when an object added to the world, check if it's a turret(Thumpable)
function AT_OnTurretPlaced(turret)
    if not turret then return end
    if instanceof(turret, "IsoThumpable") then
        local turretSquare = turret:getSquare();
        AT_OnLoadTurretSquare(turretSquare);
    end
end

-- main turret update
function DoZTurretJob()
    AT_CheckTurretStillExist();
end

-- every tick, check if the square in the list still has the turret or not
function AT_CheckTurretStillExist()
    for k,v in ipairs(AT_WorldTurretsList) do
        local square = getCell():getOrCreateGridSquare(v.x, v.y, v.z);
        if not square then
            return;
        end
        local turret = AT_CheckSquareHasTurret(square);
        if turret == nil then
            table.remove (AT_WorldTurretsList, k);
        else
            AT_TurretUpdate(turret);
        end
    end
end
-- check if the square has a turret
function AT_CheckSquareHasTurret(turretSquare)
    if not turretSquare then return end
    local squareObjects = turretSquare:getObjects();
    for i = 0, squareObjects:size()-1 do
        local obj = squareObjects:get(i);
        local itemContainer = obj:getContainer();
        if itemContainer ~= nil then
            local containerType = itemContainer:getType();
            if string.sub(containerType, 1, 6) == "Turret" then
                --print("Turret Detected: "..containerType);
                return obj;
            end
        end
    end
end
-- update turrets vision, reload, send attack command to client, consume ammo.
function AT_TurretUpdate(turret)
    if not turret then return end
    if turret:getModData().ATreloadtime == nil then
        turret:getModData().ATreloadtime = 0.0;
    end

    if turret:getModData().AT_AimingTime == nil then
        turret:getModData().AT_AimingTime = 0.0;
    end

    if turret:getModData().ATreloadtime > 0.0 then
        turret:getModData().ATreloadtime = turret:getModData().ATreloadtime - getGameTime():getRealworldSecondsSinceLastUpdate();
        turret:getModData().AT_AimingTime = turret:getModData().AT_AimingTime - getGameTime():getRealworldSecondsSinceLastUpdate();
        return;
    end

    if turret:getModData().AT_AimingTime > 0.0 then
        turret:getModData().AT_AimingTime = turret:getModData().AT_AimingTime - getGameTime():getRealworldSecondsSinceLastUpdate();
        return;
    end

    turret:getModData().AT_AimingTime = ZombRandFloat(0.1, 0.4);
    local ammo = AT_GetAmmoInTurret(turret);
    if not ammo then
        return;
    end

    local tableSquares = AT_GetTableTurretRange(turret);
    local targetSquare = AT_TurretFindTarget(turret, tableSquares);

    --return if target not found
    if not targetSquare then
        return;
    end

    local singlePlayer = getPlayer();

    if singlePlayer == nil then
        --print("Single Player not found");
        return;
    end

    local comboCords = {targetSquare:getX(), targetSquare:getY(), targetSquare:getZ(), turret:getX(), turret:getY(), turret:getZ()};
    --sendServerCommand(chosenPlayer, "On_TargetFound", "true", comboCords);
    On_TargetFound(comboCords);
    --print("Server command sent");

    turret:getModData().ATreloadtime = AT_TurretReloadSeconds[turret:getContainer():getType()] + ZombRandFloat(0.0, 0.3);
    --print("Sent to reloading state: "..tostring(turret));
end
-- check and return if the turret has the right ammo inside
function AT_GetAmmoInTurret(turretobj)
    local turret = turretobj:getContainer();
    local ammo = nil;
    local ammoTable = AT_TurretAmmoTypes[turret:getType()];
    for key,value in ipairs(ammoTable) do
        ammo = turret:getItemFromType(value);
        if ammo then
            break;
        end
    end
    return ammo;
end
-- get the turrets range/vision
function AT_GetTableTurretRange(turret)
    local squareTable = {};
    local tSquare = turret:getSquare();
    if not tSquare then return end
    local tX = tSquare:getX();
    local tY = tSquare:getY();
    local tZ = tSquare:getZ();
    local tType = turret:getContainer():getType();
    local radius = AT_TurretShootingRadius[tType];
    local facing = AT_GetTurretFacing(turret);
    local minX = tX - radius;
    local maxX = tX + radius;
    local minY = tY - radius;
    local maxY = tY + radius;

    local minZ = 0;
    local maxZ = 0;

    -- all turrets are able to shoot on its own z level
    -- sniper turret additionally could shoot 2 level lower than it is placed on
    if (tZ > 0) then
        if tType == "TurretSniper" then
            minZ = tZ - 2;
            maxZ = tZ;
        else
            minZ = tZ;
            maxZ = tZ;
        end
    end

    if minZ < 0 then
        minZ = 0;
    end

    if facing == "S" then
        minY = tY;
    elseif facing == "E" then
        minX = tX;
    elseif facing == "N" then
        maxY = tY;
    elseif facing == "W" then
        maxX = tX;
    end
    for x=minX, maxX do
        for y=minY, maxY do
            for z=minZ,maxZ do
                local LOSTestResults = LosUtil.lineClear(turret:getCell(), tX, tY, tZ, x, y, z, false);
                local tLOS = tostring(LOSTestResults);
                if tLOS == "Clear" or tLOS == "ClearThroughOpenDoor" or tLOS == "ClearThroughWindow" then
                    local sLOS = getCell():getOrCreateGridSquare(x, y, z);
                    if sLOS then
                        table.insert(squareTable, sLOS);
                    end
                end
            end
        end
    end
    return squareTable;
end
-- get turret direction, return "S", "E", "N", "W"
function AT_GetTurretFacing(turret)
    local properties = turret:getProperties();
    local facing = tostring(properties:Val("Facing"));
    return facing;
end
-- find target in the turrets range
function AT_TurretFindTarget (turret, sTable)
    local targetSquare = nil;
    local zZombieList = nil;
    local squareTable = AT_TableShuffle(sTable);
    local turretSquare = turret:getSquare();
    local tX = turretSquare:getX();
    local tY = turretSquare:getY();
    local tZ = turretSquare:getZ();

    for k,v in ipairs(squareTable) do
        if v then
            local zCell = v:getCell();
            if zCell then
                zZombieList = zCell:getZombieList();
                break;
            end
        end
    end

    local zZombieInSightList = {};
    if not zZombieList then
        return;
    end

    if zZombieList and zZombieList:size() <= 0 then
        return;
    end

    --print("Checking InSights");
    for i = 0, zZombieList:size()-1, 1 do
        local zZombie = zZombieList:get(i);
        local zZombieSquare = zZombie:getSquare();
        if zZombieSquare then
            if GetSight(turret, tX, tY, tZ,
                    zZombieSquare:getX(),
                    zZombieSquare:getY(),
                    zZombieSquare:getZ(), false) == true then

                --print("Zombie found in sight!")
                --print("Here it is: "..tostring(zZombieList:get(i)));
                if zZombieList:get(i):isDead() == false then
                    table.insert(zZombieInSightList, zZombieSquare:getID());
                    --print("Pushed into table");
                else
                    --print("Dead-ly zombie detected");
                end
            else
                --print("No friends in sight");
            end
        end
    end

    for k,v in ipairs(squareTable) do
        if v then
            for n,m in ipairs(zZombieInSightList) do
                if m then
                    --print("I see you bitches");
                    if v:getID() == m then
                        --print("I got you bitches");
                        targetSquare = v;
                        break;
                    end
                end
            end
            if targetSquare then break end
        end
    end
    return targetSquare;
end
-- shuffle vision squares table/randomizing
function AT_TableShuffle(tInput)
    local tReturn = {};
    for i = #tInput, 1, -1 do
        local j = ZombRand(i)+1;
        tInput[i], tInput[j] = tInput[j], tInput[i];
        table.insert(tReturn, tInput[i]);
    end
    return tReturn;
end
-- get sight from turret to potential dead
function GetSight(turret, tX, tY, tZ, x, y, z)
    local inSight = false;
    local LOSTestResults = LosUtil.lineClear(turret:getCell(), tX, tY, tZ, x, y, z, false);
    local tLOS = tostring(LOSTestResults);
    if tLOS == "Clear" or tLOS == "ClearThroughOpenDoor" or tLOS == "ClearThroughWindow" then
        local sLOS = getCell():getOrCreateGridSquare(x, y, z);
        if sLOS then
            --print("Friend in sight!");
            inSight = true;
        end
    end
    return inSight;
end
function On_TargetFound(comboCords)
    local zombie = nil;
    zombie = get_moving_zombie(comboCords[1], comboCords[2], comboCords[3]);

    if not zombie then
        return;
    end

    local player = getPlayer();
    --find turret in gun square
    local gunSquare = getCell():getOrCreateGridSquare(comboCords[4], comboCords[5], comboCords[6]);
    local squareObjects = gunSquare:getObjects();
    local turret = nil;
    for i = 0, squareObjects:size()-1 do
        local obj = squareObjects:get(i);
        local itemContainer = obj:getContainer();
        if itemContainer ~= nil then
            local containerType = itemContainer:getType();
            if string.sub(containerType, 1, 6) == "Turret" then
                turret = obj;
                break;
            end
        end
    end

    if turret == nil then
        --sounds bad to shoot without a turret..
        return;
    end

    --shooting start
    local turretType = turret:getContainer():getType();
    local surroundingTable = {};

    if turretType == "TurretShotgun" then
        --if turret is shotgun, kill surrounded zombies.
        local centerSquare = zombie:getCurrentSquare();
        local centralZombieId = zombie:getID();
        -- 2: MaxRange to look for more zombies around, 4: Max count for killing zombie per shot
        local surrounding_zombies = get_surrounding_zombies(centralZombieId, centerSquare:getX(), centerSquare:getY(), centerSquare:getZ(), 2, 4);
        for k,sZombie in ipairs(surrounding_zombies) do
            if sZombie then
                local zId = sZombie:getID();
                --print("zZombieId:"..tostring(zId));
                table.insert(surroundingTable, zId);
            end
        end
    end

    local zombieSquare = zombie:getSquare();
    local assassinationData = {gunX = gunSquare:getX(), gunY = gunSquare:getY(), gunZ = gunSquare:getZ(),
                               zombX = zombieSquare:getX(), zombY = zombieSquare:getY(), zombZ = zombieSquare:getZ(),
                               surTable = surroundingTable, mainTarget = zombie:getID(), gunType = turretType};

    On_AssassinationContract(assassinationData);
    --print("Assassination process started");
end

function get_moving_zombie(x,y,z)
    local zZombie = get_zombie_at(x, y, z);
    if(zZombie~= nil) then
        return zZombie;
    end

    local searchRange = 2;
    for i=1, searchRange, 1  do
        zZombie = get_zombie_at(x, y + i, z);
        if zZombie ~= nil then break end
        zZombie = get_zombie_at(x + i, y, z);
        if zZombie ~= nil then break end
        zZombie = get_zombie_at(x + i, y + i, z);
        if zZombie ~= nil then break end
        zZombie = get_zombie_at(x, y - i, z);
        if zZombie ~= nil then break end
        zZombie = get_zombie_at( x - i, y, z);
        if zZombie ~= nil then break end
        zZombie = get_zombie_at(x - i, y - i, z);
        if zZombie ~= nil then break end
        zZombie = get_zombie_at(x - i, y + i, z);
        if zZombie ~= nil then break end
        zZombie = get_zombie_at(x + i, y - i, z);
        if zZombie ~= nil then break end

        for c = 1, searchRange, 1 do
            zZombie = get_zombie_at(x, y + i + c, z);
            if zZombie ~= nil then break end
            zZombie = get_zombie_at(x + i, y + i + c, z);
            if zZombie ~= nil then break end
            zZombie = get_zombie_at(x + i + c, y, z);
            if zZombie ~= nil then break end
            zZombie = get_zombie_at(x + i + c, y + i, z);
            if zZombie ~= nil then break end
            zZombie = get_zombie_at(x + i + c, y + i + c, z);
            if zZombie ~= nil then break end
            zZombie = get_zombie_at(x, y - i - c, z);
            if zZombie ~= nil then break end
            zZombie = get_zombie_at(x - i, y - i - c, z);
            if zZombie ~= nil then break end
            zZombie = get_zombie_at(x - i - c, y, z);
            if zZombie ~= nil then break end
            zZombie = get_zombie_at(x - i - c, y - i, z);
            if zZombie ~= nil then break end
            zZombie = get_zombie_at(x - i - c, y - i - c, z);
            if zZombie ~= nil then break end
            zZombie = get_zombie_at(x - i, y + i + c, z);
            if zZombie ~= nil then break end
            zZombie = get_zombie_at(x - i - c, y + i, z);
            if zZombie ~= nil then break end
            zZombie = get_zombie_at(x - i - c, y + i + c, z);
            if zZombie ~= nil then break end
            zZombie = get_zombie_at(x + i, y - i - c, z);
            if zZombie ~= nil then break end
            zZombie = get_zombie_at(x + i + c, y - i, z);
            if zZombie ~= nil then break end
            zZombie = get_zombie_at(x + i + c, y - i - c, z);
            if zZombie ~= nil then break end
        end
    end
    return zZombie;
end
function get_surrounding_zombies(zombieId, x,y,z,searchRange,maxZTargets)
    local surrounding_zombies = {};
    local zZombie = get_zombie_at(x, y, z);
    local zCount = 0;

    if(zZombie~= nil) then
        if (zCount < maxZTargets) then
            if zZombie:getID() ~= zombieId then
                zCount = zCount + 1;
                table.insert(surrounding_zombies, zZombie);
                if (zCount >= maxZTargets) then
                    return surrounding_zombies;
                end
            end
        end
    end

    for i=1, searchRange, 1  do
        zZombie = get_zombie_at(x, y + i, z);
        if zZombie ~= nil then
            if (zCount < maxZTargets) then
                if zZombie:getID() ~= zombieId then
                    zCount = zCount + 1;
                    table.insert(surrounding_zombies, zZombie);
                    if (zCount >= maxZTargets) then
                        break;
                    end
                end
            else
                break;
            end
        end
        zZombie = get_zombie_at(x + i, y, z);
        if zZombie ~= nil then
            if (zCount < maxZTargets) then
                if zZombie:getID() ~= zombieId then
                    zCount = zCount + 1;
                    table.insert(surrounding_zombies, zZombie);
                    if (zCount >= maxZTargets) then
                        break;
                    end
                end
            else
                break;
            end
        end
        zZombie = get_zombie_at(x + i, y + i, z);
        if zZombie ~= nil then
            if (zCount < maxZTargets) then
                if zZombie:getID() ~= zombieId then
                    zCount = zCount + 1;
                    table.insert(surrounding_zombies, zZombie);
                    if (zCount >= maxZTargets) then
                        break;
                    end
                end
            else
                break;
            end
        end
        zZombie = get_zombie_at(x, y - i, z);
        if zZombie ~= nil then
            if (zCount < maxZTargets) then
                if zZombie:getID() ~= zombieId then
                    zCount = zCount + 1;
                    table.insert(surrounding_zombies, zZombie);
                    if (zCount >= maxZTargets) then
                        break;
                    end
                end
            else
                break;
            end
        end
        zZombie = get_zombie_at( x - i, y, z);
        if zZombie ~= nil then
            if (zCount < maxZTargets) then
                if zZombie:getID() ~= zombieId then
                    zCount = zCount + 1;
                    table.insert(surrounding_zombies, zZombie);
                    if (zCount >= maxZTargets) then
                        break;
                    end
                end
            else
                break;
            end
        end
        zZombie = get_zombie_at(x - i, y - i, z);
        if zZombie ~= nil then
            if (zCount < maxZTargets) then
                if zZombie:getID() ~= zombieId then
                    zCount = zCount + 1;
                    table.insert(surrounding_zombies, zZombie);
                    if (zCount >= maxZTargets) then
                        break;
                    end
                end
            else
                break;
            end
        end
        zZombie = get_zombie_at(x - i, y + i, z);
        if zZombie ~= nil then
            if (zCount < maxZTargets) then
                if zZombie:getID() ~= zombieId then
                    zCount = zCount + 1;
                    table.insert(surrounding_zombies, zZombie);
                    if (zCount >= maxZTargets) then
                        break;
                    end
                end
            else
                break;
            end
        end
        zZombie = get_zombie_at(x + i, y - i, z);
        if zZombie ~= nil then
            if (zCount < maxZTargets) then
                if zZombie:getID() ~= zombieId then
                    zCount = zCount + 1;
                    table.insert(surrounding_zombies, zZombie);
                    if (zCount >= maxZTargets) then
                        break;
                    end
                end
            else
                break;
            end
        end
        for c = 1, searchRange, 1 do
            zZombie = get_zombie_at(x, y + i + c, z);
            if zZombie ~= nil then
                if (zCount < maxZTargets) then
                    if zZombie:getID() ~= zombieId then
                        zCount = zCount + 1;
                        table.insert(surrounding_zombies, zZombie);
                        if (zCount >= maxZTargets) then
                            break;
                        end
                    end
                else
                    break;
                end
            end
            zZombie = get_zombie_at(x + i, y + i + c, z);
            if zZombie ~= nil then
                if (zCount < maxZTargets) then
                    if zZombie:getID() ~= zombieId then
                        zCount = zCount + 1;
                        table.insert(surrounding_zombies, zZombie);
                        if (zCount >= maxZTargets) then
                            break;
                        end
                    end
                else
                    break;
                end
            end
            zZombie = get_zombie_at(x + i + c, y, z);
            if zZombie ~= nil then
                if (zCount < maxZTargets) then
                    if zZombie:getID() ~= zombieId then
                        zCount = zCount + 1;
                        table.insert(surrounding_zombies, zZombie);
                        if (zCount >= maxZTargets) then
                            break;
                        end
                    end
                else
                    break;
                end
            end
            zZombie = get_zombie_at(x + i + c, y + i, z);
            if zZombie ~= nil then
                if (zCount < maxZTargets) then
                    if zZombie:getID() ~= zombieId then
                        zCount = zCount + 1;
                        table.insert(surrounding_zombies, zZombie)
                        if (zCount >= maxZTargets) then
                            break;
                        end
                    end
                else
                    break;
                end
            end
            zZombie = get_zombie_at(x + i + c, y + i + c, z);
            if zZombie ~= nil then
                if (zCount < maxZTargets) then
                    if zZombie:getID() ~= zombieId then
                        zCount = zCount + 1;
                        table.insert(surrounding_zombies, zZombie);
                        if (zCount >= maxZTargets) then
                            break;
                        end
                    end
                else
                    break;
                end
            end
            zZombie = get_zombie_at(x, y - i - c, z);
            if zZombie ~= nil then
                if (zCount < maxZTargets) then
                    if zZombie:getID() ~= zombieId then
                        zCount = zCount + 1;
                        table.insert(surrounding_zombies, zZombie);
                        if (zCount >= maxZTargets) then
                            break;
                        end
                    end
                else
                    break;
                end
            end
            zZombie = get_zombie_at(x - i, y - i - c, z);
            if zZombie ~= nil then
                if (zCount < maxZTargets) then
                    if zZombie:getID() ~= zombieId then
                        zCount = zCount + 1;
                        table.insert(surrounding_zombies, zZombie);
                        if (zCount >= maxZTargets) then
                            break;
                        end
                    end
                else
                    break;
                end
            end
            zZombie = get_zombie_at(x - i - c, y, z);
            if zZombie ~= nil then
                if (zCount < maxZTargets) then
                    if zZombie:getID() ~= zombieId then
                        zCount = zCount + 1;
                        table.insert(surrounding_zombies, zZombie);
                        if (zCount >= maxZTargets) then
                            break;
                        end
                    end
                else
                    break;
                end
            end
            zZombie = get_zombie_at(x - i - c, y - i, z);
            if zZombie ~= nil then
                if (zCount < maxZTargets) then
                    if zZombie:getID() ~= zombieId then
                        zCount = zCount + 1;
                        table.insert(surrounding_zombies, zZombie);
                        if (zCount >= maxZTargets) then
                            break;
                        end
                    end
                else
                    break;
                end
            end
            zZombie = get_zombie_at(x - i - c, y - i - c, z);
            if zZombie ~= nil then
                if (zCount < maxZTargets) then
                    if zZombie:getID() ~= zombieId then
                        zCount = zCount + 1;
                        table.insert(surrounding_zombies, zZombie);
                        if (zCount >= maxZTargets) then
                            break;
                        end
                    end
                else
                    break;
                end
            end
            zZombie = get_zombie_at(x - i, y + i + c, z);
            if zZombie ~= nil then
                if (zCount < maxZTargets) then
                    if zZombie:getID() ~= zombieId then
                        zCount = zCount + 1;
                        table.insert(surrounding_zombies, zZombie);
                        if (zCount >= maxZTargets) then
                            break;
                        end
                    end
                else
                    break;
                end
            end
            zZombie = get_zombie_at(x - i - c, y + i, z);
            if zZombie ~= nil then
                if (zCount < maxZTargets) then
                    if zZombie:getID() ~= zombieId then
                        zCount = zCount + 1;
                        table.insert(surrounding_zombies, zZombie);
                        if (zCount >= maxZTargets) then
                            break;
                        end
                    end
                else
                    break;
                end
            end
            zZombie = get_zombie_at(x - i - c, y + i + c, z);
            if zZombie ~= nil then
                if (zCount < maxZTargets) then
                    if zZombie:getID() ~= zombieId then
                        zCount = zCount + 1;
                        table.insert(surrounding_zombies, zZombie);
                        if (zCount >= maxZTargets) then
                            break;
                        end
                    end
                else
                    break;
                end
            end
            zZombie = get_zombie_at(x + i, y - i - c, z);
            if zZombie ~= nil then
                if (zCount < maxZTargets) then
                    if zZombie:getID() ~= zombieId then
                        zCount = zCount + 1;
                        table.insert(surrounding_zombies, zZombie);
                        if (zCount >= maxZTargets) then
                            break;
                        end
                    end
                else
                    break;
                end
            end
            zZombie = get_zombie_at(x + i + c, y - i, z);
            if zZombie ~= nil then
                if (zCount < maxZTargets) then
                    if zZombie:getID() ~= zombieId then
                        zCount = zCount + 1;
                        table.insert(surrounding_zombies, zZombie);
                        if (zCount >= maxZTargets) then
                            break;
                        end
                    end
                else
                    break;
                end
            end
            zZombie = get_zombie_at(x + i + c, y - i - c, z);
            if zZombie ~= nil then
                if (zCount < maxZTargets) then
                    if zZombie:getID() ~= zombieId then
                        zCount = zCount + 1;
                        table.insert(surrounding_zombies, zZombie);
                        if (zCount >= maxZTargets) then
                            break;
                        end
                    end
                else
                    break;
                end
            end
        end
    end

    local hash = {};
    local result = {};

    for _,v in ipairs(surrounding_zombies) do
        if v then
            local zId = v:getID();
            if (not hash[zId]) then
                table.insert(result, v);
                hash[zId] = true;
            end
        end
    end

    return result;
end
function get_zombie_at(x,y,z)
    local doomedZombie = nil;
    local zTargetSquare = getCell():getOrCreateGridSquare(x, y, z);
    doomedZombie = zTargetSquare:getZombie();

    if doomedZombie then
        if doomedZombie:isDead() == true then
            doomedZombie = nil;
        end
    end
    return doomedZombie;
end
function On_AssassinationContract(args)

    local mainTarget = args.mainTarget;
    if not mainTarget then
        --print("No target - No Deal");
        return;
    end

    local currentPlayer = getPlayer();
    local mainZombie = nil;
    local zombieSquare = getCell():getOrCreateGridSquare(args.zombX, args.zombY, args.zombZ);
    zZombieList = zombieSquare:getCell():getZombieList();

    if zZombieList then
        for i = 0, zZombieList:size()-1, 1 do
            if (zZombieList:get(i):getID() == args.mainTarget) then
                mainZombie = zZombieList:get(i);
                break;
            end
        end
    end

    if not mainZombie then
        --print("No main zombie - No big Deal");
        return;
    end

    if args.surTable then
        if zZombieList then
            for i = 0, zZombieList:size()-1, 1 do
                local zZombie = zZombieList:get(i);
                for k, v  in ipairs(args.surTable) do
                    if k then
                        if (zZombie:getID() == v) then
                            zZombie:addRandomBloodDirtHolesEtc();
                            zZombie:Kill(currentPlayer);
                        end
                    end
                end
            end
        end
    end

    local gunSquare = getCell():getOrCreateGridSquare(args.gunX, args.gunY, args.gunZ);
    local soundString = AT_TurretShootingSound[args.gunType]..tostring(ZombRand(3));
    local sound = getSoundManager():PlayWorldSound(soundString, gunSquare, 0, 4, 1.0, false);
    mainZombie:addRandomBloodDirtHolesEtc();
    mainZombie:startMuzzleFlash();
    mainZombie:Kill(currentPlayer);
    --print("Assassination accomplished");

    local turretSquare = getCell():getOrCreateGridSquare(args.gunX, args.gunY, args.gunZ);
    local zTurret = AT_CheckSquareHasTurret(turretSquare);
    if not zTurret then
        --print("Turelko connection lost...");
        return;
    end

    local ammo = AT_GetAmmoInTurret(zTurret);
    zTurret:getContainer():Remove(ammo);
    --print("Ammo sacrificed");
end

Events.OnObjectAdded.Add(AT_OnTurretPlaced);
Events.LoadGridsquare.Add(AT_OnLoadTurretSquare);
Events.OnTick.Add(DoZTurretJob);